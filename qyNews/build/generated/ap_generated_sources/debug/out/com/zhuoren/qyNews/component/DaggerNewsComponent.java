// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.zhuoren.qyNews.component;

import com.zhuoren.qyNews.ui.news.NewsListFragment;
import com.zhuoren.qyNews.ui.news.NewsListFragment_MembersInjector;
import com.zhuoren.qyNews.ui.news.presenter.NewsListPresenter;
import com.zhuoren.qyNews.ui.news.presenter.NewsListPresenter_Factory;
import dagger.MembersInjector;
import dagger.internal.MembersInjectors;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerNewsComponent implements NewsComponent {
  private Provider<NewsListPresenter> newsListPresenterProvider;

  private MembersInjector<NewsListFragment> newsListFragmentMembersInjector;

  private DaggerNewsComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.newsListPresenterProvider =
        NewsListPresenter_Factory.create(MembersInjectors.<NewsListPresenter>noOp());

    this.newsListFragmentMembersInjector =
        NewsListFragment_MembersInjector.create(newsListPresenterProvider);
  }

  @Override
  public void inject(NewsListFragment newsFragment) {
    newsListFragmentMembersInjector.injectMembers(newsFragment);
  }

  public static final class Builder {
    private ApplicationComponent applicationComponent;

    private Builder() {}

    public NewsComponent build() {
      if (applicationComponent == null) {
        throw new IllegalStateException(
            ApplicationComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerNewsComponent(this);
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }
  }
}
