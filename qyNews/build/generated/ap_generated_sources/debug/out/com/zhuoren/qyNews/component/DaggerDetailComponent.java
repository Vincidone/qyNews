// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.zhuoren.qyNews.component;

import com.zhuoren.qyNews.net.NewsApi;
import com.zhuoren.qyNews.ui.news.DetailFragment;
import com.zhuoren.qyNews.ui.news.DetailFragment_MembersInjector;
import com.zhuoren.qyNews.ui.news.presenter.DetailPresenter;
import com.zhuoren.qyNews.ui.news.presenter.DetailPresenter_Factory;
import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.MembersInjectors;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerDetailComponent implements DetailComponent {
  private Provider<NewsApi> getNetEaseApiProvider;

  private Provider<DetailPresenter> detailPresenterProvider;

  private MembersInjector<DetailFragment> detailFragmentMembersInjector;

  private DaggerDetailComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.getNetEaseApiProvider =
        new Factory<NewsApi>() {
          private final ApplicationComponent applicationComponent = builder.applicationComponent;

          @Override
          public NewsApi get() {
            return Preconditions.checkNotNull(
                applicationComponent.getNetEaseApi(),
                "Cannot return null from a non-@Nullable component method");
          }
        };

    this.detailPresenterProvider =
        DetailPresenter_Factory.create(
            MembersInjectors.<DetailPresenter>noOp(), getNetEaseApiProvider);

    this.detailFragmentMembersInjector =
        DetailFragment_MembersInjector.create(detailPresenterProvider);
  }

  @Override
  public void inject(DetailFragment detailFragment) {
    detailFragmentMembersInjector.injectMembers(detailFragment);
  }

  public static final class Builder {
    private ApplicationComponent applicationComponent;

    private Builder() {}

    public DetailComponent build() {
      if (applicationComponent == null) {
        throw new IllegalStateException(
            ApplicationComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerDetailComponent(this);
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }
  }
}
